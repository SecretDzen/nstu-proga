fviz_nbclust(summ_1, kmeans ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
# df.stand <- as.data.frame(scale(USArrests))
nb <- NbClust(table, distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz_nbclust(summ_1, kmeans, ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
# df.stand <- as.data.frame(scale(USArrests))
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz_nbclust(summ_1, kmeans, ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
# df.stand <- as.data.frame(scale(USArrests))
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz_nbclust(nb, kmeans, ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# fix the functions
fviz_nbclust <- function (x, FUNcluster = NULL, method = c("silhouette", "wss",
"gap_stat"), diss = NULL, k.max = 10, nboot = 100, verbose = interactive(),
barfill = "steelblue", barcolor = "steelblue", linecolor = "steelblue",
print.summary = TRUE, ...)
{
set.seed(123)
if (k.max < 2)
stop("k.max must bet > = 2")
method = match.arg(method)
if (!inherits(x, c("data.frame", "matrix")) & !("Best.nc" %in%
names(x)))
stop("x should be an object of class matrix/data.frame or ",
"an object created by the function NbClust() [NbClust package].")
if (inherits(x, "list") & "Best.nc" %in% names(x)) {
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") )
.viz_NbClust(x, print.summary, barfill, barcolor)
}
else if (is.null(FUNcluster))
stop("The argument FUNcluster is required. ", "Possible values are kmeans, pam, hcut, clara, ...")
else if (!is.function(FUNcluster)) {
stop("The argument FUNcluster should be a function. ",
"Check if you're not overriding the specified function name somewhere.")
}
else if (method %in% c("silhouette", "wss")) {
if (is.data.frame(x))
x <- as.matrix(x)
if (is.null(diss))
diss <- stats::dist(x)
v <- rep(0, k.max)
if (method == "silhouette") {
for (i in 2:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_ave_sil_width(diss, clust$cluster)
}
}
else if (method == "wss") {
for (i in 1:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_withinSS(diss, clust$cluster)
}
}
df <- data.frame(clusters = as.factor(1:k.max), y = v,
stringsAsFactors = TRUE)
ylab <- "Total Within Sum of Square"
if (method == "silhouette")
ylab <- "Average silhouette width"
p <- ggpubr::ggline(df, x = "clusters", y = "y", group = 1,
color = linecolor, ylab = ylab, xlab = "Number of clusters k",
main = "Optimal number of clusters")
if (method == "silhouette")
p <- p + geom_vline(xintercept = which.max(v), linetype = 2,
color = linecolor)
return(p)
}
else if (method == "gap_stat") {
extra_args <- list(...)
gap_stat <- cluster::clusGap(x, FUNcluster, K.max = k.max,
B = nboot, verbose = verbose, ...)
if (!is.null(extra_args$maxSE))
maxSE <- extra_args$maxSE
else maxSE <- list(method = "firstSEmax", SE.factor = 1)
p <- fviz_gap_stat(gap_stat, linecolor = linecolor,
maxSE = maxSE)
return(p)
}
}
.viz_NbClust <- function (x, print.summary = TRUE, barfill = "steelblue",
barcolor = "steelblue") {
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") ) {
best_nc <- as.data.frame(t(best_nc), stringsAsFactors = TRUE)
best_nc$Number_clusters <- as.factor(best_nc$Number_clusters)
if (print.summary) {
ss <- summary(best_nc$Number_clusters)
cat("Among all indices: \n===================\n")
for (i in 1:length(ss)) {
cat("*", ss[i], "proposed ", names(ss)[i],
"as the best number of clusters\n")
}
cat("\nConclusion\n=========================\n")
cat("* According to the majority rule, the best number of clusters is ",
names(which.max(ss)), ".\n\n")
}
df <- data.frame(Number_clusters = names(ss), freq = ss,
stringsAsFactors = TRUE)
p <- ggpubr::ggbarplot(df, x = "Number_clusters",
y = "freq", fill = barfill, color = barcolor) +
labs(x = "Number of clusters k", y = "Frequency among all indices",
title = paste0("Optimal number of clusters - k = ",
names(which.max(ss))))
return(p)
}
}
# assign them to the factoextra namespace
environment(fviz_nbclust) <- asNamespace("factoextra")
assignInNamespace("fviz_nbclust",fviz_nbclust,"factoextra")
environment(.viz_NbClust) <- asNamespace("factoextra")
assignInNamespace(".viz_NbClust",.viz_NbClust,"factoextra")
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
# df.stand <- as.data.frame(scale(USArrests))
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(nb, kmeans,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
# df.stand <- as.data.frame(scale(USArrests))
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(summ_1, kmeans,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(as.data.frame(summ_1), kmeans,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(nb, kmeans,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(summ_1, data = table, ,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
fviz <- fviz_nbclust(summ_1, data = table,
ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
View(summ1)
#fviz <- fviz_nbclust(summ_1, data = table,
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, clusters, iter.max = 100)
View(summ_1)
#fviz <- fviz_nbclust(summ_1, data = table,
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
fviz <- fviz_nbclust(summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
summ_1
#fviz <- fviz_nbclust(summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
fviz <- fviz_nbclust(list(data = table, clusters=summ_1$cluster))
# summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
fviz <- fviz_nbclust(summ_1)
# summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# Оценка качества кластеризации
cluster_builder(data_scaled, 2)
# Оценка качества кластеризации
cluster_builder(data_scaled, 1)
# Оценка качества кластеризации
cluster_builder(data_scaled, 3)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
CLUSTERS_NUM <- 2
data_numeric <- extract_numeric(data)
View(data_numeric)
dim(data_numeric)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
CLUSTERS_NUM <- 4
data_numeric <- extract_numeric(data)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
summ_1
#fviz <- fviz_nbclust(summ_1)
# summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters, nstart = 25)
fviz <- fviz_nbclust(summ_1)
# summ_1, data = table)
#                     ellipse.type = "norm", show.clust.cent = TRUE, ellipse = TRUE)
#fviz
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters, nstart = 25)
clusplot(table, summ_1$cluster, color=TRUE, shade=TRUE, labels=3, lines=0)
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
library(cluster)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters, nstart = 25)
clusplot(table, summ_1$cluster, color=TRUE, shade=TRUE, labels=3, lines=0)
}
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
clusplot(table, summ_1$cluster, color = TRUE, shade = TRUE, labels = 3, lines = 0)
}
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
CLUSTERS_NUM <- 2
data_numeric <- extract_numeric(data)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
CLUSTERS_NUM <- 5
data_numeric <- extract_numeric(data)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
CLUSTERS_NUM <- 4
data_numeric <- extract_numeric(data)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
par(mfrow = c(1, 1))
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
#clusplot(table, summ_1$cluster, color = TRUE, shade = TRUE, labels = 3, lines = 0)
fviz_cluster(summ_1)
}
cluster_builder(data_scaled, CLUSTERS_NUM)
}
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
#clusplot(table, summ_1$cluster, color = TRUE, shade = TRUE, labels = 3, lines = 0)
fviz_cluster(summ_1, data = table)
}
cluster_builder(data_scaled, CLUSTERS_NUM)
cluster_builder <- function(table, clusters) {
nb <- NbClust(as.data.frame(table), distance = "euclidean", min.nc = 2,
max.nc = 9, method = "complete", index = "all")
nb$All.index
nb$Best.nc
nb$Best.partition
summ_1 <- kmeans(table, centers = clusters)
fviz_cluster(summ_1, data = table, ellipse = TRUE, ellipse.type = "norm")
}
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
summary(data)
summary(data)
str(data)
CLUSTERS_NUM <- 4
data_numeric <- extract_numeric(data)
data_scaled <- scale(data_numeric, center = TRUE, scale = TRUE)
table_dist <- dist(data_scaled)
# Дендограмма
par(mfrow = c(1, 1))
clust <- hsclust_builder(table_dist, CLUSTERS_NUM)
# Дендограмма с тепловой картой
heatmap_builder(data_scaled)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
# Кофенетическая корреляция
cor_builder(table_dist, clust)
# Оценка качества кластеризации
cluster_builder(data_scaled, CLUSTERS_NUM)
